{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","numOfSecs","useState","breakLength","setBreakLength","sessionLength","setSessionLength","isCounting","setIsCounting","currentMins","setCurrentMins","currentSecs","setCurrentSecs","currentLabel","setCurrentLabel","numOfSecondsSession","useEffect","sessionOrBreak","x","document","getElementById","interval","setInterval","m","Math","floor","s","play","clearInterval","body","style","backgroundImage","className","href","rel","target","id","border","onClick","prevBreakLength","aria-hidden","prevSessionLength","color","slice","handleCounterSecs","prevIsCounting","pause","currentTime","src","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.dfe2b5e7.chunk.js","sourcesContent":["import \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport \"font-awesome/css/font-awesome.min.css\";\n\nfunction App() {\n  // ! Defining states\n  const [breakLength, setBreakLength] = useState(5);\n  const [sessionLength, setSessionLength] = useState(25);\n  const [isCounting, setIsCounting] = useState(false);\n  const [currentMins, setCurrentMins] = useState(sessionLength);\n  const [currentSecs, setCurrentSecs] = useState(0);\n  const [currentLabel, setCurrentLabel] = useState(\"Session\");\n  // ! __________________________________________________________________\n  var interval;\n  // ! Updating all values\n  var numOfSecondsSession = currentMins * 60 + currentSecs;\n  useEffect(() => {\n    var numOfSecondsSession = currentMins * 60 + currentSecs - 1;\n    var sessionOrBreak = 1;\n    var x = document.getElementById(\"beep\");\n    if (numOfSecondsSession >= 0 && isCounting === true) {\n      const interval = setInterval(() => {\n        if (numOfSecondsSession >= 0 && isCounting === true) {\n          var m = Math.floor(numOfSecondsSession / 60);\n          var s = numOfSecondsSession % 60;\n          numOfSecondsSession -= 1;\n          setCurrentMins(m);\n          setCurrentSecs(s);\n        } else if (sessionOrBreak === 1) {\n          x.play();\n          setCurrentLabel(\"Break\");\n          setCurrentMins(breakLength);\n          setCurrentSecs(0);\n          sessionOrBreak = 0;\n          numOfSecondsSession = breakLength * 60;\n        } else if (sessionOrBreak === 0) {\n          x.play();\n          setCurrentLabel(\"Session\");\n          setCurrentMins(breakLength);\n          setCurrentSecs(0);\n          numOfSecondsSession = sessionLength * 60;\n          sessionOrBreak = 1;\n        } else {\n          clearInterval(interval);\n        }\n      }, 1000);\n      return () => clearInterval(interval);\n    }\n    // eslint-disable-next-line\n  }, [isCounting]);\n\n  useEffect(() => {\n    if (currentLabel === \"Session\") {\n      document.body.style.backgroundImage =\n        \"url('https://wallpaperaccess.com/full/2040033.jpg')\";\n    } else {\n      document.body.style.backgroundImage =\n        \"url('https://community.paraplegie.ch/images/blog/2019-08-20-meditation_think_its_just_for_monks/meditation_cover.jpg')\";\n    }\n  }, [currentLabel]);\n  // ! __________________________________________________________________\n  // ! Resetting all values\n  const handleResetting = () => {\n    var x = document.getElementById(\"beep\");\n    x.pause();\n    x.currentTime = 0;\n    setIsCounting(false);\n    setCurrentLabel(\"Session\");\n    setCurrentMins(25);\n    setCurrentSecs(0);\n    setSessionLength(25);\n    setBreakLength(5);\n    clearInterval(interval);\n  };\n  // ! __________________________________________________________________\n  // ! Updating values based on session length increment or decrement\n  useEffect(() => {\n    setCurrentMins(sessionLength);\n    setCurrentSecs(0);\n  }, [sessionLength]);\n  // ! __________________________________________________________________\n  // ! Handling break increment and decrement\n  const handleBreakDecrement = () =>\n    breakLength > 1 && setBreakLength((prevBreakLength) => prevBreakLength - 1);\n  const handleBreakIncrement = () =>\n    breakLength < 60 &&\n    setBreakLength((prevBreakLength) => prevBreakLength + 1);\n  // ! __________________________________________________________________\n  // ! Handling session increment and decrement\n  const handleSessionDecrement = () =>\n    sessionLength > 1 &&\n    setSessionLength((prevSessionLength) => prevSessionLength - 1);\n  const handleSessionIncrement = () =>\n    sessionLength < 60 &&\n    setSessionLength((prevSessionLength) => prevSessionLength + 1);\n  // ! __________________________________________________________________\n  // ! For parsing number of input seconds to 'mm:ss' format\n  const handleCounterSecs = (numOfSecs) => {\n    return (\"0\" + (numOfSecs % 60)).slice(-2);\n  };\n  const handleCounterMins = (numOfSecs) => {\n    return (\"0\" + Math.floor(numOfSecs / 60)).slice(-2);\n  };\n  // ! __________________________________________________________________\n  // ! For showing time\n  const timeShowUpdate = () => {\n    setIsCounting((prevIsCounting) => !prevIsCounting);\n  };\n  // ! __________________________________________________________________\n  return (\n    <div>\n      <div>\n        <h1 className=\"designBy\">\n          Designed and coded by{\" \"}\n          <a\n            href=\"https://www.linkedin.com/in/davor-jovanovi%C4%87/\"\n            rel=\"noreferrer\"\n            target=\"_blank\"\n          >\n            DavorJ\n          </a>\n        </h1>\n      </div>\n      <div\n        id=\"allElementContainer\"\n        style={\n          currentMins === 0\n            ? { border: \"2px solid red\" }\n            : { border: \"2px solid white\" }\n        }\n      >\n        <div className=\"clockTitle\">Pomodoro Clock</div>\n        <div id=\"breakAndSessionDuration\">\n          <div id=\"break-label\" className=\"breakAndSessionLabels\">\n            <p className=\"durationLabels\">Break duration</p>\n            <div className=\"incrementDecrement\">\n              <div\n                id=\"break-decrement\"\n                onClick={isCounting ? null : handleBreakDecrement}\n              >\n                <i className=\"fa fa-arrow-circle-o-down\" aria-hidden=\"true\"></i>\n              </div>\n              <div id=\"break-length\">{breakLength}</div>\n              <div\n                id=\"break-increment\"\n                onClick={isCounting ? null : handleBreakIncrement}\n              >\n                <i className=\"fa fa-arrow-circle-o-up\" aria-hidden=\"true\"></i>\n              </div>\n            </div>\n          </div>\n          <div id=\"session-label\" className=\"breakAndSessionLabels\">\n            <p className=\"durationLabels\">Session duration</p>\n            <div className=\"incrementDecrement\">\n              <div\n                id=\"session-decrement\"\n                onClick={isCounting ? null : handleSessionDecrement}\n              >\n                <i className=\"fa fa-arrow-circle-o-down\" aria-hidden=\"true\"></i>\n              </div>\n              <div id=\"session-length\">{sessionLength}</div>\n              <div\n                id=\"session-increment\"\n                onClick={isCounting ? null : handleSessionIncrement}\n              >\n                <i className=\"fa fa-arrow-circle-o-up\" aria-hidden=\"true\"></i>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"bottomSection\">\n          <div\n            className=\"currentSecsAndLabel\"\n            style={\n              currentMins === 0\n                ? { color: \"red\", border: \"2px solid red\" }\n                : { color: \"white\", border: \"2px solid white\" }\n            }\n          >\n            <div id=\"timer-label\">{currentLabel}</div>\n            <div id=\"time-left\">\n              {handleCounterMins(numOfSecondsSession) +\n                \":\" +\n                handleCounterSecs(numOfSecondsSession)}\n            </div>\n          </div>\n          <div className=\"onOffReset\">\n            <div\n              id=\"start_stop\"\n              onClick={timeShowUpdate}\n              style={isCounting ? { color: \"green\" } : { color: \"white\" }}\n            >\n              <i className=\"fa fa-power-off fa-3x\" aria-hidden=\"true\"></i>\n            </div>\n            <div id=\"reset\" onClick={handleResetting}>\n              <i className=\"fa fa-refresh fa-3x\" aria-hidden=\"true\"></i>\n            </div>\n          </div>\n        </div>\n        <audio\n          id=\"beep\"\n          src=\"http://soundbible.com/mp3/foghorn-daniel_simon.mp3\"\n        ></audio>\n      </div>\n    </div>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}